@page "/Book/{BookId:int}"
@implements IDisposable
@using BymseBooks.Ui.Models
@using BymseBooks.Core.Models
@using BymseBooks.Core
@using System.Net
@inject BooksService BooksService
@inject IJSRuntime JsRuntime

<div class="book-page-container">
    <div class="control-panel">
        <div class="control-panel__left">
            <button class="control-panel__bookmarks-list-btn" type="button"></button>
            <div class="control-panel__title" title="@Title">@Title</div>
        </div>
        <div class="control-panel__center">
            <div class="control-panel__pages">37 / 256</div>
        </div>
        <div class="control-panel__right">
            <div class="control-panel__scale">
                <button type="button">+</button>
                <span class="control-panel__scale_sep"></span>
                <button type="button">-</button>
            </div>
            <button class="control-panel__bookmarks-btn control-panel__bookmarks-btn_add"></button>
        </div>
    </div>
    <div class="book-wrapper">
        @if (ShowCover)
        {
            <div class="book-cover" onclick="@OnCoverClick">
                <BookCard Book="@BookModel.Book" ShowAuthor="true" NoLink="true"/>
            </div>
        }
        else
        {
            <div id="pdf-viewer-container" data-pdf-src="@GetUrl()">
                <div id="pdf-viewer" class="pdfViewer"></div>
            </div>
        }
    </div>
    <div class="action-buttons">

    </div>
</div>

@code {

    [Parameter]
    public int BookId { get; set; }

    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private BookExModel BookModel { get; set; }

    private string Title => $"{BookModel.Book.Title} by {BookModel.Book.Author}";

    private bool ShowCover { get; set; } = true;

    private async Task OnCoverClick()
    {
        ShowCover = false;
        await Task.Delay(1);
        await JsRuntime.InvokeVoidAsync("PdfViewer.initialize");
    }

    private ITopBarItem topBarItem;

    protected override void OnInitialized()
    {
        topBarItem = new LinkTopBarItem
        {
            Url = "/",
            Css = "top-bar__back-button"
        };
        MainLayout.Items.Add(topBarItem);

        BookModel = BooksService.FindBook(BookId);
    }

    private string GetUrl() => $"/user-file/{WebUtility.UrlEncode(new Uri(BookModel.Url).AbsolutePath)}";

    public void Dispose()
    {
        MainLayout.Items.Remove(topBarItem);
    }

}